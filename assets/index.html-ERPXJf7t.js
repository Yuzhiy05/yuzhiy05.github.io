import{_ as k,c as d,a as t,e as i,b as a,d as n,r as p,o as r,f as h}from"./app-BKu1TSIW.js";const E={},A={class:"vp-file-tree"},c={class:"tree-node folder"},m={class:"tree-node file"},o={class:"tree-node file"},D={class:"tree-node file"},y={class:"tree-node file"},g={class:"tree-node file"},C={class:"tree-node file"},_={class:"tree-node file"},u={class:"tree-node file"},v={class:"tree-node file"},b={class:"tree-node file"},B={class:"tree-node file"},T={class:"vp-file-tree"},R={class:"tree-node folder"},f={class:"tree-node file"},S={class:"tree-node file"},O={class:"tree-node file"},I={class:"tree-node file"},F={class:"tree-node file"},P={class:"tree-node file"},N={class:"tree-node file"},M={class:"tree-node file"},x={class:"tree-node file"},U={class:"tree-node file"},H={class:"tree-node file"},K={class:"tree-node file"},L={class:"tree-node file"};function X(q,s){const l=p("VPIcon"),e=p("FileTreeItem");return r(),d("div",null,[s[31]||(s[31]=t('<p>cmake 各变量名字</p><p>PROJECT_SOURCE_DIR 表示当前项目的根目录也就是当前cmakelist文件所在路径。调用project(xxx)指定项目后的源代码目录</p><p>PROJECT_BINARY_DIR 项目的构建目录通常都在构建文件夹下(build)文件夹下 当使用Bbuild 或指定构建文件夹.</p><p>CMAKE_CURRENT_SOURCE_DIR 表示当前CMakeLists.txt 所在的源码目录 CMAKE_CURRENT_BINARY_DIR 表示当前输出目录的位置</p><p>CMAKE_SOURCE_DIR：根项目源码路径最外层cmakeList（存放main.cpp的地方） CMAKE_BINARY_DIR：根项目输出路径（存放main.exe的地方）</p><p>PROJECT_IS_TOP_LEVEL：BOOL类型，表示当前项目是否是（最顶层的）根项目 PROJECT_NAME：当前项目名 CMAKE_PROJECT_NAME：根项目的项目名</p><p>EXECUTABLE_OUTPUT_PATH 可执行文件的输出路径(旧变量不建议使用，可能不生效) CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE 使用此项代替</p><p>LIBRARY_OUTPUT_PATH 库文件的输出路径(旧变量不建议使用，可能不生效) CMAKE_ARCHIVE_OUTPUT_DIRECTORY 静态库输出路径 CMAKE_LIBRARY_OUTPUT_DIRECTORY 动态库输出路径</p><p>小技巧：CMake 的 ${} 表达式可以嵌套</p><p>CMAKE_CXX_STANDARD 是一个整数，表示要用的 C++ 标准。 比如需要 C++17 那就设为 17，需要 C++23 就设为 23。</p><p>CMAKE_CXX_STANDARD_REQUIRED 是 BOOL 类型，可以为 ON 或 OFF，默认OFF。 他表示是否一定要支持你指定的 C++ 标准：如果为 OFF 则 CMake 检测到编译器不支持 C++17 时不报错，而是默默调低到 C++14 给你用；为 ON 则发现不支持报错，更安全。 通常我们设为ON。 CMAKE_CXX_EXTENSIONS 也是 BOOL 类型，默认为 ON。 设为 ON 表示启用 GCC 特有的一些扩展功能；OFF 则关闭 GCC 的扩展功能，只使用标准的 C++。 要兼容其他编译器（如 MSVC）的项目，都会设为 OFF 防止不小心用了 GCC 才有的特性。 通常我们设为OFF</p><p>CMAKE_BUILD_TOOL: 执行构建过程的工具。该变量设置为CMake构建时输出所需的程序。对于VS 6， CMAKE_BUILD_TOOL设置为msdev， 对于Unix，它被设置为make 或 gmake。 对于 VS 7， 它被设置为devenv. 对于Nmake构建文件，它的值为nmake。 CMAKE_DL_LIBS: 包含dlopen和dlclose的库的名称。 CMAKE_COMMAND: 指向cmake可执行程序的全路径。 CMAKE_CTEST_COMMAND: 指向ctest可执行程序的全路径。 CMAKE_EDIT_COMMAND: cmake-gui或ccmake的全路径。 CMAKE_EXECUTABLE_SUFFIX: 该平台上可执行程序的后缀。 CMAKE_SIZEOF_VOID_P: void指针的大小。 CMAKE_SKIP_RPATH: 如果为真，将不添加运行时路径信息。默认情况下是如果平台支持运行时信息，将会添加运行时信息到可执行程序当中。这样从构建树中运行程序将很容易。为了在安装过程中忽略掉RPATH，使用CMAKE_SKIP_INSTALL_RPATH。 CMAKE_GENERATOR: 构建工程的产生器。它将产生构建文件 (e.g. &quot;Unix Makefiles&quot;, &quot;Visual Studio 2019&quot;, etc.)</p><p>从指定目录中搜寻源文件，并将它们存入变量SRC_LIST和CW_SRC_LIST中</p><div class="language-cmake" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">aux_source_directory</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> SRC_LIST)</span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">aux_source_directory</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/cw/src CW_SRC_LIST)</span></span></code></pre></div><p>此命令不会递归查找子目录,只会识别.cpp .cc .cxx 不会识别.hpp .h文件 同样CMake 无法生成知道何时添加了新的源文件此时需要重新运行 CMake 一般用作</p><blockquote><p>显式模板实例化的项目。模板实例化文件可以存储在 Template 子目录中，并使用此命令自动收集，以避免手动列出所有实例化</p></blockquote><p>最简单的例子</p><p>获取所有源文件进行编译 有如下文件结构</p>',18)),i("div",A,[i("ul",null,[a(e,{type:"folder",expanded:!0,empty:!1},{default:n(()=>[i("span",c,[a(l,{name:"vscode-icons:default-folder"}),s[0]||(s[0]=i("span",{class:"name"},"helloproject",-1))]),i("ul",null,[a(e,{type:"file",expanded:!1,empty:!0},{default:n(()=>[i("span",m,[a(l,{name:"vscode-icons:default-file"}),s[1]||(s[1]=i("span",{class:"name"},"build",-1)),s[2]||(s[2]=i("span",{class:"comment"},[i("br"),h(" -...省略")],-1))])]),_:1}),a(e,{type:"file",expanded:!1,empty:!0},{default:n(()=>[i("span",o,[a(l,{name:"vscode-icons:default-file"}),s[3]||(s[3]=i("span",{class:"name"},"src",-1))])]),_:1}),a(e,{type:"file",expanded:!1,empty:!0},{default:n(()=>[i("span",D,[a(l,{name:"vscode-icons:file-type-cpp"}),s[4]||(s[4]=i("span",{class:"name"},"demo1.cpp",-1))])]),_:1}),a(e,{type:"file",expanded:!1,empty:!0},{default:n(()=>[i("span",y,[a(l,{name:"vscode-icons:file-type-cpp"}),s[5]||(s[5]=i("span",{class:"name"},"demo2.cxx",-1))])]),_:1}),a(e,{type:"file",expanded:!1,empty:!0},{default:n(()=>[i("span",g,[a(l,{name:"vscode-icons:file-type-c"}),s[6]||(s[6]=i("span",{class:"name"},"demo3.h",-1))])]),_:1}),a(e,{type:"file",expanded:!1,empty:!0},{default:n(()=>[i("span",C,[a(l,{name:"vscode-icons:file-type-cppheader"}),s[7]||(s[7]=i("span",{class:"name"},"demo4.hpp",-1))])]),_:1}),a(e,{type:"file",expanded:!1,empty:!0},{default:n(()=>s[8]||(s[8]=[i("span",{class:"tree-node file"},[i("span",{class:"name"},"...")],-1)])),_:1}),a(e,{type:"file",expanded:!1,empty:!0},{default:n(()=>[i("span",_,[a(l,{name:"vscode-icons:default-file"}),s[9]||(s[9]=i("span",{class:"name"},"src2",-1))])]),_:1}),a(e,{type:"file",expanded:!1,empty:!0},{default:n(()=>[i("span",u,[a(l,{name:"vscode-icons:file-type-cpp"}),s[10]||(s[10]=i("span",{class:"name"},"demo3.cpp",-1))])]),_:1}),a(e,{type:"file",expanded:!1,empty:!0},{default:n(()=>[i("span",v,[a(l,{name:"vscode-icons:file-type-text"}),s[11]||(s[11]=i("span",{class:"name"},"CmakeLists.txt",-1))])]),_:1}),a(e,{type:"file",expanded:!1,empty:!0},{default:n(()=>[i("span",b,[a(l,{name:"vscode-icons:file-type-json"}),s[12]||(s[12]=i("span",{class:"name"},"CmakePresets.json",-1))])]),_:1}),a(e,{type:"file",expanded:!1,empty:!0},{default:n(()=>[i("span",B,[a(l,{name:"vscode-icons:file-type-cpp"}),s[13]||(s[13]=i("span",{class:"name"},"hello.cpp",-1))])]),_:1})])]),_:1})])]),s[32]||(s[32]=t(`<p>添加src文件夹下所有文件进行编译</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">cmake_minimum_required</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">VERSION</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 3.5.0)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(CMAKE_CXX_STANDARD 23)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(CMAKE_CXX_STANDARD_REQUIRED </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">true</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(CMAKE_CXX_EXTENSIONS </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">OFF</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">project</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(hello)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(STATUS </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;PROJECT_SOURCE_DIR目录为=\${PROJECT_SOURCE_DIR}&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(STATUS </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;PROJECT_BINARY_DIR目录为=\${PROJECT_BINARY_DIR}&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">aux_source_directory</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/src SRC_LIST)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include_directories</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(src)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(STATUS </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;源码路径SRC_LIST文件=\${SRC_LIST}&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">add_executable</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(hello main.cpp </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${SRC_LIST}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="列出所有源码" tabindex="-1"><a class="header-anchor" href="#列出所有源码"><span>列出所有源码</span></a></h3><div class="language-cmake" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">file</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(GLOB_RECURSE/GLOB  &lt;变量名&gt;  op(可选项):[CONFIGURE_DEPENDS] &lt;expr-</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">path</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&gt;)</span></span></code></pre></div><p>是一个用来匹配指定路径下所有符合通配符条件的文件的命令。 GLOB_RECURSE 是递归查找目录下的所有文件， GLOB 则只在指定文件下 CONFIGURE_DEPENDS 标记依赖 当文件夹下新增文件时cmake会重新编译添加进文件 expr-path 简单的正则表达式表示的路径 file() 命令则可以用来获取文件列表</p><p>file(GLOB_RECURSE SOURCES src/<em>.cpp include/</em>.h) 递归地查找 src 和 include 目录下所有以 .cpp 或 .h 结尾的文件，并将它们存储在 SOURCES 变量中。然后，add_executable 命令使用 SOURCES 变量中的文件来生成可执行文件</p><h3 id="引入第三方静态库" tabindex="-1"><a class="header-anchor" href="#引入第三方静态库"><span>引入第三方静态库</span></a></h3><p>以spdlog为例子 此类库基本为头文件库体积不打使用子模块构建</p><div class="language-powershell" data-ext="powershell" data-title="powershell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">git submodule add </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">path</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">仓库地址 注意仓库的分支默认是拉取默认分支</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">git submodule add </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">b </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">branch</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">repository</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">path</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  选择分支拉取</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">git submodule add git</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">github.com</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">:gabime</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">/</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">spdlog.git</span></span></code></pre></div><div class="language-cmake" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">add_subdirectory</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(spdlog) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#添加子项目 相对当前cmakelist所在文件夹的相对路径</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include_directories</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(spdlog/include/spdlog) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#包含头文件</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">add_executable</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(hello main.cpp )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">target_link_libraries</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(hello spdlog) 链接库</span></span></code></pre></div><p>find_libary</p><p>应用于单纯的二进制包，没有配置文件，或者本地项目构建出的库.以下以本地构建的库为例</p>`,12)),i("div",T,[i("ul",null,[a(e,{type:"folder",expanded:!0,empty:!1},{default:n(()=>[i("span",R,[a(l,{name:"vscode-icons:default-folder"}),s[14]||(s[14]=i("span",{class:"name"},"helloproject",-1))]),i("ul",null,[a(e,{type:"file",expanded:!1,empty:!0},{default:n(()=>[i("span",f,[a(l,{name:"vscode-icons:default-file"}),s[15]||(s[15]=i("span",{class:"name"},"build",-1)),s[16]||(s[16]=i("span",{class:"comment"},[i("br"),h(" -...省略")],-1))])]),_:1}),a(e,{type:"file",expanded:!1,empty:!0},{default:n(()=>[i("span",S,[a(l,{name:"vscode-icons:default-file"}),s[17]||(s[17]=i("span",{class:"name"},"src",-1))])]),_:1}),a(e,{type:"file",expanded:!1,empty:!0},{default:n(()=>[i("span",O,[a(l,{name:"vscode-icons:file-type-cpp"}),s[18]||(s[18]=i("span",{class:"name"},"demo1.cpp",-1))])]),_:1}),a(e,{type:"file",expanded:!1,empty:!0},{default:n(()=>s[19]||(s[19]=[i("span",{class:"tree-node file"},[i("span",{class:"name"},"...")],-1)])),_:1}),a(e,{type:"file",expanded:!1,empty:!0},{default:n(()=>[i("span",I,[a(l,{name:"vscode-icons:default-file"}),s[20]||(s[20]=i("span",{class:"name"},"lib",-1))])]),_:1}),a(e,{type:"file",expanded:!1,empty:!0},{default:n(()=>[i("span",F,[a(l,{name:"vscode-icons:default-file"}),s[21]||(s[21]=i("span",{class:"name"},"mylib.dll(构建后生成)",-1))])]),_:1}),a(e,{type:"file",expanded:!1,empty:!0},{default:n(()=>[i("span",P,[a(l,{name:"vscode-icons:default-file"}),s[22]||(s[22]=i("span",{class:"name"},"mylib",-1))])]),_:1}),a(e,{type:"file",expanded:!1,empty:!0},{default:n(()=>[i("span",N,[a(l,{name:"vscode-icons:default-file"}),s[23]||(s[23]=i("span",{class:"name"},"build",-1)),s[24]||(s[24]=i("span",{class:"comment"}," -...构建文件(省略)",-1))])]),_:1}),a(e,{type:"file",expanded:!1,empty:!0},{default:n(()=>[i("span",M,[a(l,{name:"vscode-icons:file-type-c"}),s[25]||(s[25]=i("span",{class:"name"},"mylib.h",-1))])]),_:1}),a(e,{type:"file",expanded:!1,empty:!0},{default:n(()=>[i("span",x,[a(l,{name:"vscode-icons:file-type-cpp"}),s[26]||(s[26]=i("span",{class:"name"},"mylib.cpp",-1))])]),_:1}),a(e,{type:"file",expanded:!1,empty:!0},{default:n(()=>[i("span",U,[a(l,{name:"vscode-icons:file-type-text"}),s[27]||(s[27]=i("span",{class:"name"},"CmakeLists.txt",-1))])]),_:1}),a(e,{type:"file",expanded:!1,empty:!0},{default:n(()=>[i("span",H,[a(l,{name:"vscode-icons:file-type-text"}),s[28]||(s[28]=i("span",{class:"name"},"CmakeLists.txt",-1))])]),_:1}),a(e,{type:"file",expanded:!1,empty:!0},{default:n(()=>[i("span",K,[a(l,{name:"vscode-icons:file-type-json"}),s[29]||(s[29]=i("span",{class:"name"},"CmakePresets.json",-1))])]),_:1}),a(e,{type:"file",expanded:!1,empty:!0},{default:n(()=>[i("span",L,[a(l,{name:"vscode-icons:file-type-cpp"}),s[30]||(s[30]=i("span",{class:"name"},"hello.cpp",-1))])]),_:1})])]),_:1})])]),s[33]||(s[33]=t(`<p>在路径helloproject/lib/CmakeLists.txt 中</p><div class="language-cmake" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#设置库路径</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#指定库生成路径</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">CMAKE_ARCHIVE_OUTPUT_DIRECTORY</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> \${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/lib)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">CMAKE_LIBRARY_OUTPUT_DIRECTORY</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> \${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/lib)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(LIB_SRC </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${PROJECT}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/lib/mylib.cpp)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#生成dll</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">add_library</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(testshared SHARED </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${LIB_SRC}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#生成库的名字(也可以指定其他属性)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set_target_properties</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(testshared PROPERTIES </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">OUTPUT_NAME</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> &quot;test&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span></code></pre></div><p>在路径helloproject/lib/build/中 执行命令构建目标库</p><div class="language-powershell" data-ext="powershell" data-title="powershell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cmake .</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">.</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> -</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">G</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Ninja</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">  //</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">生成构建系统 最好指定使用toolchain.cmake配置指定编译器而不是让cmake寻找编译器可能会找到意料之外编译器或版本</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cmake </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">--</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">build </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">.</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">  //</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">单个库通常不需要指定目标</span></span></code></pre></div><p>在路径helloproject/CmakeLists.txt 中</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">···</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#include_directories(\${CMAKE_SOURCE_DIR}/mylib/) #指定头文件搜索路径</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">find_library</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(test_path </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">NAMES</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> test</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> PATHS</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ./lib)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(STATUS </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;库全路径为 \${test_path}&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">find_library</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          &lt;VAR&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">          name</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> | </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">NAMES</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> name1 [name2 ...] [NAMES_PER_DIR]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          [HINTS [</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">path</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> | ENV var]...]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          [</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">PATHS</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">path</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> | ENV var]...]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          [REGISTRY_VIEW (64|32|64_32|32_64|HOST|</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">TARGET</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">|BOTH)]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          [PATH_SUFFIXES suffix1 [suffix2 ...]]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          [VALIDATOR function]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          [</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">DOC</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> &quot;cache documentation string&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          [NO_CACHE]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          [REQUIRED]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          [NO_DEFAULT_PATH]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          [NO_PACKAGE_ROOT_PATH]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          [NO_CMAKE_PATH]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          [NO_CMAKE_ENVIRONMENT_PATH]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          [NO_SYSTEM_ENVIRONMENT_PATH]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          [NO_CMAKE_SYSTEM_PATH]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          [NO_CMAKE_INSTALL_PREFIX]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">          [CMAKE_FIND_ROOT_PATH_BOTH |</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">           ONLY_CMAKE_FIND_ROOT_PATH |</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">           NO_CMAKE_FIND_ROOT_PATH]</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">         )</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>&lt;VAR&gt; :首个参数指定查找结果作为变量 (库的全路径包括后缀) 上述命令中为 test_path 当库未被找到，&lt;var&gt;中存放的值为<code>\\&lt;var\\&gt;-NOTFOUND</code>。 NO_CACHE 项 只要&lt;var&gt;中的值不是<code>\\&lt;var\\&gt;-NOTFOUND</code>(或有值)，那么即使多次调用find_library，&lt;var&gt;也不会再刷新(只要找到一个&lt;var&gt;，后续每次执行cmake命令得到的&lt;var&gt;都是首次找到的&lt;var&gt;值（除非清除CMakeCache.txt文件)。该选项将&lt;var&gt;变量当成一个普通变量而不是一个缓存条目，需要cmake 3.21及以上的版本支持(理解为全局变量，且会写入CMakeCache.txt文件，在不清除CMakeCache.txt文件的情况下，每次执行cmake都会先从CMakeCache.txt载入该变量的值)</p></div><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">//例</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">make_minimum_required (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">VERSION</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 3.21)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">project</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (fl)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">find_library</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (libvar mymath </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">PATHS</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ./mylib NO_CACHE)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">find_library</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (libvar mymath </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">PATHS</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ./lib NO_CACHE) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 即使./lib中也存在mymath库，由于在上一步的./mylib中已经找到，因此本条命令不会执行查找</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${libvar}</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> STREQUAL</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> &quot;libvar-NOTFOUND&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (FATAL_ERROR </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;required mymath library but not found!&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">else</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (STATUS </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;mymath library found in \${libvar}&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">endif</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">//例</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">make_minimum_required (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">VERSION</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 3.21)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">project</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (fl)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">find_library</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (libvar mymath </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">PATHS</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ./mylib) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># libvar是缓存条目，会存入\`CMakeCache.txt\`，后续即使把PATHS ./mylib改成PATHS ./mylib2（不存在库mymath），也不会保存，因为libvar变量已经从缓存中载入</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${libvar}</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> STREQUAL</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> &quot;libvar-NOTFOUND&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (FATAL_ERROR </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;required mymath library but not found!&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">else</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (STATUS </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;mymath library found in \${libvar}&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">endif</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>NAMES或name: 指定一个或多个库的名字 上述命令中为 NAMES test</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>[PATHS [path | ENV var]...]或[HINTS [path | ENV var]...]: 可选项 指定搜索库的路径 上述命令中为 PATHS ./lib 同时可以指定环境变量 <code>find_library (libvar mymath PATHS ENV TESTPATH)</code> 指定环境变量TESTPATH 为查找路径 假设环境变量被设置为./lib</p></div><p>REQUIRED：指定该选项后，当找不到库，会输出一条错误信息并终止cmake处理过程；未指定REQUIRED选项，当find_library未找到库时，后续find_library有针对&lt;var&gt;的调用会继续查找。该选项需要cmake 3.18及以上的版本支持</p><p>PATH_SUFFIXES：为每个搜索目录添加变量PATH_SUFFIXES指定的后缀目录，假设当前搜索的目录为/A;/C/D，PATH_SUFFIXES指定的后缀目录为PS(当前可以指定多个，以分号分割开即可)，那么除了/A;/C/D之外，/A/PS;/C/D/PS也会被搜索</p><div class="language-cmake" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">find_library</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (libvar mymath </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">PATHS</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ./ PATH_SUFFIXES mylib) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 会从./以及./mylib中搜索指定的mymath库是否存在</span></span></code></pre></div><p>CMAKE_FIND_ROOT_PATH：指定搜索的根路径</p><p>CMAKE_SYSROOT：该选项的值会传递给编译器的--sysroot标记(--sysroot用于指定编译搜索库和头文件的根目的，例如编译器原本搜搜索/A/include和/A/lib，使用--sysroot=DIR后，编译器搜索的库和头文件目录变成/DIR/A/include和/DIR/A/lib) NO_DEFAULT_PATH:如果指定了，默认搜索路径不会生效 默认搜索路径:CMAKE_LIBRARY_ARCHITECTURE、CMAKE_PREFIX_PATH、CMAKE_LIBRARY_PATH、CMAKE_FRAMEWORK_PATH 指定的路径或 系统环境变量（例如系统环境变量LIB和PATH定义的路径）、系统的默认的库安装路径,例如/usr、/usr/lib等</p><div class="vp-steps"><p>1.先找包路径&lt;PackageName&gt;_ROOT(NO_PACKAGE_ROOT_PATH 或CMAKE_FIND_USE_PACKAGE_ROOT_PATH 为 FALSE则跳过) &lt;CurrentPackage&gt;_ROOT, ENV{&lt;CurrentPackage&gt;_ROOT}, &lt;ParentPackage&gt;_ROOT, ENV{&lt;ParentPackage&gt;_ROOT} 2.cmake缓存变量，即命令行中 -D &lt;VAR&gt;=value 设置的变量 例如<code>cmake . -DCMAKE_XXX_PATH=D:xxx\\xxx</code> (NO_CMAKE_PATH 如果设置了此项或CMAKE_FIND_USE_CMAKE_PATH 为 FALSE 则跳过) other 3.cmake指定的环境变量 CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH (设置此项为FALSE或NO_CMAKE_ENVIRONMENT_PATH 跳过此过程) other 4.HINT 指定的路径 HINT使用系统内计算的软路径，相对路径 ,PATH指定硬编码的路径 5.编译环境的系统环境变量(例如系统环境变量LIB和PATH定义的路径) (NO_SYSTEM_ENVIRONMENT_PATH或CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH 为FALSE 时跳过) 6.当前系统平台中相关的cmake变量(系统的默认的库安装路径) (CMAKE_INSTALL_PREFIX 和 CMAKE_STAGING_PREFIX) NO_CMAKE_SYSTEM_PATH或 CMAKE_FIND_USE_CMAKE_SYSTEM_PATH 为 FALSE 可以跳过所有这些路径搜索 other(关联路径替换为 CMAKE_SYSTEM_PREFIX_PATH 默认前缀 Windows下的/XXXX/Program Files，Linux下的/usr或/usr/local 查找时替换为/XXXX/Program Files/lib , /usr/local/lib进行搜索 CMAKE_SYSTEM_LIBRARY_PATH 默认是当前系统的标准目录</p><p>CMAKE_SYSTEM_FRAMEWORK_PATH 给macOS用，其框架路径 ) 通常是已安装的软件的位置，比如Linux下软件安装到/usr/local</p><p>7.PATHS指定路径 或 简短版本 find_library (&lt;VAR&gt; name1 [path1 path2 ...])中的的路径path1,path2...</p><p>指定如下这些变量也能忽略上述查找 CMAKE_IGNORE_PATH, CMAKE_IGNORE_PREFIX_PATH, CMAKE_SYSTEM_IGNORE_PATH and CMAKE_SYSTEM_IGNORE_PREFIX_PATH</p><p>other： &lt;prefix&gt;/lib/&lt;arch&gt; CMAKE_LIBRARY_ARCHITECTURE 如果该变量被设置，那么会搜索目录<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mi>C</mi><mi>M</mi><mi>A</mi><mi>K</mi><msub><mi>E</mi><mi>P</mi></msub><mi>R</mi><mi>E</mi><mi>F</mi><mi>I</mi><msub><mi>X</mi><mi>P</mi></msub><mi>A</mi><mi>T</mi><mi>H</mi></mrow><mi mathvariant="normal">/</mi><mi>l</mi><mi>i</mi><mi>b</mi><mi mathvariant="normal">/</mi></mrow><annotation encoding="application/x-tex">{CMAKE_PREFIX_PATH}/lib/</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">CM</span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.13889em;">REF</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span></span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">ib</span><span class="mord">/</span></span></span></span>{CMAKE_LIBRARY_ARCHITECTURE} CMAKE_PREFIX_PATH 多个前缀以分号分隔 比如 CMAKE_PREFIX_PATH=A;B 那么会为\${CMAKE_PREFIX_PATH}/lib 即 A/lib ,B/lib中查找库 CMAKE_LIBRARY_PATH 指定find_library的库查找目录，默认值为空，多个值时需要以分号分割列表指定</p><p>CMAKE_FRAMEWORK_PATH 给macOS 用的 &lt;prefix&gt;/lib/</p></div><p>默认搜索路径需要涵盖最常用和最不常用的情况，通常 使用NO前缀项忽略 find_library (&lt;VAR&gt; NAMES name PATHS paths... NO_DEFAULT_PATH) find_library (&lt;VAR&gt; NAMES name) NAMES 指定多个名字时，默认每个路径都搜索一遍该名字 (一个名字在多个文件夹搜索) NAMES_PER_DIR 选项 指定一次考虑一个文件夹(路径)每次搜索所有名字 (多个名字在一个文件夹检索) 查找库名字时先原样查找 给什么查什么 比如 <code>find_library (lib NAMES mylib PATHS &quot;D:\\xxx\\xxx&quot; NO_DEFAULT_PATH)</code> 那么先查找<code>mylib</code> 某些平台规定的前后缀(例如.lib或.so)由 CMAKE_FIND_LIBRARY_PREFIXES 和CMAKE_FIND_LIBRARY_SUFFIXES 变量指定 。当然也可以直接写明后缀。如mylib.a(unix) mylib.lib(win)</p><p>如果目标库是框架 &lt;VAR&gt;变量存储目标库的全路径 &lt;fullPath&gt;/A.framework,当框架被当作库使用时 使用-framework A, 和 -F&lt;fullPath&gt; 链接框架到目标</p><p>如果指定了自定义搜索路径前缀 CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX 那么搜索时的 前缀路径lib/ 会替换为 \${CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX}/(同样存lib32,libx32,lib64 版本) project()命令启动时如果设置了至少一种语言 那么会自动设置此类变量</p><p>FIND_LIBRARY_USE_LIB32_PATHS(同样存lib32,libx32,lib64 版本) 在搜索路径中匹配到lib/后，会为这个目录添加一个后缀，然后在添加后缀后的目录中搜索库</p><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">cmake_minimum_required</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">VERSION</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 3.21)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">project</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (fl)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">find_library</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (libvar mymath </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">PATHS</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ./lib) </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 假设lib目录不存在但是lib64目录存在</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${libvar}</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> STREQUAL</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> &quot;libvar-NOTFOUND&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (FATAL_ERROR </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;required mymath library but not found!&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">else</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    message</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (STATUS </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;mymath library found in \${libvar}&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">endif</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">// 命令行中执行</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cmake .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">// 执行结果</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">-- mymath library found in /XXX/lib64/libmymath.a</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21))])}const V=k(E,[["render",X],["__file","index.html.vue"]]),G=JSON.parse('{"path":"/article/bijxvme0/","title":"编写cmake","lang":"zh-CN","frontmatter":{"title":"编写cmake","createTime":"2024/12/26 22:32:41","permalink":"/article/bijxvme0/","description":"cmake 各变量名字 PROJECT_SOURCE_DIR 表示当前项目的根目录也就是当前cmakelist文件所在路径。调用project(xxx)指定项目后的源代码目录 PROJECT_BINARY_DIR 项目的构建目录通常都在构建文件夹下(build)文件夹下 当使用Bbuild 或指定构建文件夹. CMAKE_CURRENT_SOURCE_...","head":[["meta",{"property":"og:url","content":"https://github.com/Yuzhiy05/Yuzhiy05.github.io/article/bijxvme0/"}],["meta",{"property":"og:title","content":"编写cmake"}],["meta",{"property":"og:description","content":"cmake 各变量名字 PROJECT_SOURCE_DIR 表示当前项目的根目录也就是当前cmakelist文件所在路径。调用project(xxx)指定项目后的源代码目录 PROJECT_BINARY_DIR 项目的构建目录通常都在构建文件夹下(build)文件夹下 当使用Bbuild 或指定构建文件夹. CMAKE_CURRENT_SOURCE_..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-27T09:33:06.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-27T09:33:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"编写cmake\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-27T09:33:06.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"列出所有源码","slug":"列出所有源码","link":"#列出所有源码","children":[]},{"level":3,"title":"引入第三方静态库","slug":"引入第三方静态库","link":"#引入第三方静态库","children":[]}],"readingTime":{"minutes":10.43,"words":3128},"git":{"createdTime":1735224313000,"updatedTime":1740648786000,"contributors":[{"name":"ImoutoCon1999","email":"ImoutoCon1999@outlook.com","commits":8},{"name":"Yuzhiy05","email":"ImoutoCon1999@outlook.com","commits":2}]},"autoDesc":true,"filePathRelative":"tools/编写cmake.md","categoryList":[{"id":"4a9315","sort":10001,"name":"tools"}],"bulletin":false}');export{V as comp,G as data};
