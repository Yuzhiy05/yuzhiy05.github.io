import{_ as i,c as a,a as t,o as e}from"./app-BKu1TSIW.js";const n={};function p(l,s){return e(),a("div",null,s[0]||(s[0]=[t(`<p>就是比如浮点格式，场宽，整形基底什么的 就是一种类型改它输出方式 操纵符全被定义在fast_io的manipulators命名空间中 用户允许向这个命名空间加自己的操纵符 比如你要将整数16进制输出</p><div class="language-c++" data-ext="c++" data-title="c++"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">size_t</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">100</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> namespace</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> fast_io</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">mnp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">hex</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">如果前面要有0x你hex0x</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">base</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">36</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">这是36进制输出</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">base</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">基底</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span></code></pre></div><p>hex是不是base&lt;16&gt;的特化 还有oct, bin ,dec 把整数按地址格式输出就有addrvw(i)</p><p>你用操纵符，只是告诉fast_io让它类型能找到正确的 在编译时 它本身并不干活的 如果你要输出char const* cstr，你需要用os_c_str(cstr)或者os_c_str(cstr,n) 前者调用strlen得到长度，后者调用strnlen得到长度 如果要输出指针值，要用pointervw或handlevw 成员函数指针，要用methodvw</p>`,4)]))}const r=i(n,[["render",p],["__file","index.html.vue"]]),k=JSON.parse('{"path":"/article/d3sghq29/","title":"fast_io_manipulators","lang":"zh-CN","frontmatter":{"title":"fast_io_manipulators","createTime":"2024/12/04 14:58:10","permalink":"/article/d3sghq29/","description":"就是比如浮点格式，场宽，整形基底什么的 就是一种类型改它输出方式 操纵符全被定义在fast_io的manipulators命名空间中 用户允许向这个命名空间加自己的操纵符 比如你要将整数16进制输出 hex是不是base<16>的特化 还有oct, bin ,dec 把整数按地址格式输出就有addrvw(i) 你用操纵符，只是告诉fast_io让它类型...","head":[["meta",{"property":"og:url","content":"https://github.com/Yuzhiy05/Yuzhiy05.github.io/article/d3sghq29/"}],["meta",{"property":"og:title","content":"fast_io_manipulators"}],["meta",{"property":"og:description","content":"就是比如浮点格式，场宽，整形基底什么的 就是一种类型改它输出方式 操纵符全被定义在fast_io的manipulators命名空间中 用户允许向这个命名空间加自己的操纵符 比如你要将整数16进制输出 hex是不是base<16>的特化 还有oct, bin ,dec 把整数按地址格式输出就有addrvw(i) 你用操纵符，只是告诉fast_io让它类型..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-04T09:01:14.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-04T09:01:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"fast_io_manipulators\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-04T09:01:14.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":0.81,"words":243},"git":{"createdTime":1733302874000,"updatedTime":1733302874000,"contributors":[{"name":"Yuzhiy05","email":"ImoutoCon1999@outlook.com","commits":1}]},"autoDesc":true,"filePathRelative":"1.cpplang/fast_io_manipulators.md","categoryList":[{"id":"fdffa8","sort":1,"name":"cpplang"}],"bulletin":false}');export{r as comp,k as data};
