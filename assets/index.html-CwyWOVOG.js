import{_ as i,c as a,a as n,o as e}from"./app-BKu1TSIW.js";const l="/images/note/vscodetool/pluge.png",t="/images/note/vscodetool/task_list_pre.png",p="/images/note/vscodetool/vscode_butten_build.png",h={};function k(d,s){return e(),a("div",null,s[0]||(s[0]=[n('<h2 id="前提介绍" tabindex="-1"><a class="header-anchor" href="#前提介绍"><span>前提介绍</span></a></h2><p>因为本文使用的编译器为Cqwrteur编译的编译器，所以相比mingw-w64的安装包缺少在linux上的常用构建工具<code>makefile</code>,且因为直接解压缩没有写入注册表，环境变量需要读者自己配置。 本文采用ninja作为构建工具，Cmake作为生成.ninja的项目管理工具。</p><h2 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作"><span>准备工作</span></a></h2><p>1.下载VScode,ninja,Cmake<br> 2.Windows环境下载mingw64<br><a href="https://github.com/trcrsired/llvm-releases" target="_blank" rel="noopener noreferrer">下载链接</a><br> 3.解压缩x86-64 w64-mingw32<br> 4.添加至用户环境变量<code>PATH</code><br><em>D:\\workfile\\gcc15\\x86_64-w64-mingw32\\bin</em><br><em>D:\\workfile\\gcc15\\x86_64-w64-mingw32\\lib</em><br><em>D:\\workfile\\gcc15\\x86_64-w64-mingw32\\lib32</em><br> 5.下载c++插件 <img src="'+l+`" alt="alt text" loading="lazy"></p><h2 id="vscode搭配cmake" tabindex="-1"><a class="header-anchor" href="#vscode搭配cmake"><span>Vscode搭配Cmake</span></a></h2><p>首先需要了解Vscode配置的三个重要的json文件，当然你也可以选择手动在命令行输入编译指令与构建命令.</p><h3 id="task-json" tabindex="-1"><a class="header-anchor" href="#task-json"><span>task.json</span></a></h3><p>1.创建一个文件夹<code>vscodestudy</code>,一个main.cpp文件,在文件中复制下列代码</p><div class="language-c++" data-ext="c++" data-title="c++"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">iostream</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(){</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cout</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello world</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><p>2.由于你装了之前的CPP插件,右上角有一个三角形的运行按钮，点击;在vscode上方的任务栏中会出现默认生成的任务供你选择。我们选择第二个任务<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup><img src="`+t+'" alt="alt text" loading="lazy"><br><img src="'+p+`" alt="alt text" loading="lazy"><br> 这是根据你本地安装的编译器，且在用户变量中配置后，vscode检测到生成的,本文中使用mingw-w64(GCC)<em>编译器</em>，所以只出现了g++相关配置,之后插件会自动生成task.json文件<sup class="footnote-ref"><a href="#footnote1">[1:1]</a><a class="footnote-anchor" id="footnote-ref1:1"></a></sup><br> 3.这样就拥有了一个单文件的编译器<br> 4.深入了解task.json<br> ide的本质还是在终端调用对应编译器的命令来进行编译的,<code>task.json</code>文件就是帮我们在终端进行命令的输出,读者可以在vscode下方的终端中输入<code> g++ -g main.cpp -o main.exe</code>命令来手动编译。</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>    &quot;tasks&quot;: [</span></span>
<span class="line"><span>        {</span></span>
<span class="line"><span>            &quot;type&quot;: &quot;cppbuild&quot;,</span></span>
<span class="line"><span>            &quot;label&quot;: &quot;C/C++: g++.exe 生成活动文件&quot;,</span></span>
<span class="line"><span>            &quot;command&quot;: &quot;D:\\...\\x86_64-w64-mingw32\\\\bin\\\\g++.exe&quot;,</span></span>
<span class="line"><span>            &quot;args&quot;: [</span></span>
<span class="line"><span>                &quot;-fdiagnostics-color=always&quot;,</span></span>
<span class="line"><span>                &quot;-g&quot;,</span></span>
<span class="line"><span>                &quot;\${file}&quot;,</span></span>
<span class="line"><span>                &quot;-o&quot;,</span></span>
<span class="line"><span>                &quot;\${fileDirname}\\\\\${fileBasenameNoExtension}.exe&quot;</span></span>
<span class="line"><span>            ],</span></span>
<span class="line"><span>            &quot;options&quot;: {</span></span>
<span class="line"><span>                &quot;cwd&quot;: &quot;\${fileDirname}&quot;</span></span>
<span class="line"><span>            },</span></span>
<span class="line"><span>            &quot;problemMatcher&quot;: [</span></span>
<span class="line"><span>                &quot;$gcc&quot;</span></span>
<span class="line"><span>            ],</span></span>
<span class="line"><span>            &quot;group&quot;: {</span></span>
<span class="line"><span>                &quot;kind&quot;: &quot;build&quot;,</span></span>
<span class="line"><span>                &quot;isDefault&quot;: true</span></span>
<span class="line"><span>            },</span></span>
<span class="line"><span>            &quot;detail&quot;: &quot;调试器生成的任务。&quot;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    ],</span></span>
<span class="line"><span>    &quot;version&quot;: &quot;2.0.0&quot;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上是自动生成的<code>task.json</code>，因为插件的原因,当鼠标触碰到对应字段上会显示对应字段的意义,以下选取一些进行讲解. 1.<code>type</code>为自定义的任务类型,当前只需要了解有默认生成的<code>cppbuild,shell,process</code>就好。对于自定义任务，这可以是shell或process。如果指定shell，则该命令将解释为 shell 命令（例如：bash、cmd 或 PowerShell）。如果process指定，则该命令被解释为要执行的进程 2.<code>lable</code>任务标签,你可以按你喜欢的方式取名字<br> 3.<code>command</code>实际执行的命令,如果你像环境变量添加了某些路径那么不需要将完整路径写出,如上文的 <code>g++ -g ...</code><br> 4.<code>args</code> 不是必要的,某些命令就不需要参数,如执行在本地exe程序 <code>./main.exe</code>，你可以直接写入在commnd中而不需要任何参数<br> 5.</p><p><a href="https://code.visualstudio.com/docs/editor/tasks-appendix" target="_blank" rel="noopener noreferrer">task.json具体参数</a></p><h3 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题"><span>常见问题:</span></a></h3><div class="language-" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>正在启动生成...</span></span>
<span class="line"><span>cmd /c chcp 65001&gt;nul &amp;&amp; D:\\workfile\\gcc15\\x86_64-w64-mingw32\\bin\\gcc.exe -fdiagnostics-color=always -g C:\\Users\\Yuzhiy\\Desktop\\vscodestudy\\main.cpp -o C:\\Users\\Yuzhiy\\Desktop\\vscodestudy\\main.exe</span></span>
<span class="line"><span>D:/workfile/gcc15/x86_64-w64-mingw32/bin/../lib/gcc/x86_64-w64-mingw32/15.0.0/../../../../x86_64-w64-mingw32/bin/ld.exe: C:\\Users\\Yuzhiy\\AppData\\Local\\Temp\\cc0yAYeW.o: in function \`main&#39;:</span></span>
<span class="line"><span>C:/Users/Yuzhiy/Desktop/vscodestudy/main.cpp:4:(.text+0x1f): undefined reference to \`std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::operator&lt;&lt; &lt;std::char_traits&lt;char&gt; &gt;(std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, char const*)&#39;</span></span>
<span class="line"><span>D:/workfile/gcc15/x86_64-w64-mingw32/bin/../lib/gcc/x86_64-w64-mingw32/15.0.0/../../../../x86_64-w64-mingw32/bin/ld.exe: C:\\Users\\Yuzhiy\\AppData\\Local\\Temp\\cc0yAYeW.o:main.cpp:(.rdata$.refptr._ZSt4cout[.refptr._ZSt4cout]+0x0): undefined reference to \`std::cout&#39;</span></span>
<span class="line"><span>collect2.exe: error: ld returned 1 exit status</span></span></code></pre></div><p>3.Q:<code>task.json</code>中的传递给编译器的参数行(args)中的<code>-fdiagnostics-color=always</code>参数是什么意思? A:-fdiagnostics-color=always 即总是输出颜色代码,由于vscode的任务栏中的输出不是真正的终端，是由js文件渲染的伪终端,需要将g++输出的信息渲染为带颜色的输出</p><p>1.CMakePresets.json：用于指定整个项目的构建细节，json中包含</p><div class="language-c++ line-numbers-mode" data-ext="c++" data-title="c++"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">name</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">预设的名称，一般用表示平台或编译期的版本名字</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">vendor</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">可选内容，提供供应商的信息，</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Cmake一般不管除非有所谓映射</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">不用管</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">displayName</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">此预设的个性化名词</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">无关紧要</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">一般有编译期名字代替如</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">GCC 15.0.0 x86_64-w64-mingw32</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">description</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">自定义的描述</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">无关紧要</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">一般使用本地编译期所在路径描述</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">steps</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A required array of objects describing the steps of the </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">workflow</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> The</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> first step must be a configure preset</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> and</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> all subsequent steps must be non</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> configure presets whose configurePreset field matches the starting configure </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">preset</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Each</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> object may contain the following fields:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">type</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A required </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">string</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> The</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> first step must be </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">configure</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Subsequent</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> steps must be either build</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> or</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> package.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">name</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">A required string representing the name of the configure</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> build</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> or</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> package preset to run as </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> workflow step.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.CmakeLists.txt：告诉Cmake如何构建你的项目</p><h3 id="构建cmakelists" tabindex="-1"><a class="header-anchor" href="#构建cmakelists"><span>构建CmakeLists</span></a></h3><p>1.打开Vscode的命令面板 (Ctrl+Shift+P) 并运行CMake: Quick Start命令<br> 2.输入项目名称，选择c++作为项目语言<br> 3.暂时选择<code>CTest</code>作为测试支持<br> 4.选择<code>Executable</code>作为项目类型时，创建包含<code>main</code>函数的<code>mian.cpp</code>文件 Note:当然想要创建头文件或基础资源时可选择<code>Library</code></p><h3 id="创建-cmakepresets-json" tabindex="-1"><a class="header-anchor" href="#创建-cmakepresets-json"><span>创建 CMakePresets.json</span></a></h3><p>1.选择 添加新的预设值和从编译器创建<br> note:该扩展可自动扫描计算机上的工具包，并创建系统中发现的编译器列表。 2.根据你想要编译器选择 3.输入预设的名字 完成这些步骤后，您就拥有了一个完整的 hello world CMake 项目，其中包含以下文件: <code>main.cpp</code>, <code>CMakeLists.txt</code>, and <code>CMakePresets.json</code>.</p><h2 id="创建一个项目" tabindex="-1"><a class="header-anchor" href="#创建一个项目"><span>创建一个项目</span></a></h2><p><code>tasks.json</code> (构建指导)<br><code>launch.json</code> (debugger 设置)<br><code>c_cpp_properties.json</code> (编译器路径与智能感知设置)</p><p>首次运行程序时，C++ 扩展会创建一个 tasks.json 文件，您可以在项目的 .vscode 文件夹中找到该文件。tasks.json 会存储您的构建配置</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">tasks</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">type</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">cppbuild</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">label</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">C/C++: g++.exe build active file</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">command</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">C:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\\\</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">msys64</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\\\</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">ucrt64</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\\\</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">bin</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\\\</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">g++.exe</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">args</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">        &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">-fdiagnostics-color=always</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">        &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">-g</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">        &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">\${file}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">        &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">-o</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">        &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">\${fileDirname}</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\\\</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">\${fileBasenameNoExtension}.exe</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      ],</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">options</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">        &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">cwd</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">\${fileDirname}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      },</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">problemMatcher</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">$gcc</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">],</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">group</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">        &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">kind</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">build</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">        &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">isDefault</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      },</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">detail</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Task generated by Debugger.</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  ],</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">version</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">2.0.0</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="使用cmake" tabindex="-1"><a class="header-anchor" href="#使用cmake"><span>使用cmake</span></a></h1><h2 id="cmakelist配置" tabindex="-1"><a class="header-anchor" href="#cmakelist配置"><span>cmakelist配置</span></a></h2><h3 id="生成动态库" tabindex="-1"><a class="header-anchor" href="#生成动态库"><span>生成动态库</span></a></h3><p>1.有如下目录结构</p><div class="language-" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>&gt;cmake_study  </span></span>
<span class="line"><span>    |          </span></span>
<span class="line"><span>    |__lib  </span></span>
<span class="line"><span>    |__testFunc  </span></span>
<span class="line"><span>        |__testFunc.c  </span></span>
<span class="line"><span>        |__test2.h</span></span></code></pre></div><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 新建变量SRC_LIST</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(SRC_LIST </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/testFunc/testFunc.c)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 对 源文件变量 生成动态库 testFunc_shared</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">add_library</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(testFunc_shared SHARED </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${SRC_LIST}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 对 源文件变量 生成静态库 testFunc_static</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">add_library</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(testFunc_static STATIC </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${SRC_LIST}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 设置最终生成的库的名称</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set_target_properties</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(testFunc_shared PROPERTIES </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">OUTPUT_NAME</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> &quot;testFunc&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set_target_properties</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(testFunc_static PROPERTIES </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">OUTPUT_NAME</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> &quot;testFunc&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 设置库文件的输出路径</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">LIBRARY_OUTPUT_PATH</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> \${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/lib)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1.<code>add_library</code>：生成动态库或静态库<br> 第1个参数：指定库的名字<br> 第2个参数：决定是动态还是静态，如果没有就默认静态<br> 第3个参数：指定生成库的源文件<br> 2.<code>set_target_properties</code>：设置最终生成的库的名称，还有其它功能，如设置库的版本号等等<br> 3.<code>LIBRARY_OUTPUT_PATH</code>：库文件的默认输出路径，这里设置为工程目录下的lib目录</p><p>前面使用set_target_properties重新定义了库的输出名称，如果不使用set_target_properties也可以，那么库的名称就是add_library里定义的名称，只是连续2次使用add_library指定库名称时（第一个参数），这个名称不能相同，而set_target_properties可以把名称设置为相同，只是最终生成的库文件后缀不同（一个是.so，一个是.a.win中为dll），这样相对来说会好看点</p><h3 id="链接库" tabindex="-1"><a class="header-anchor" href="#链接库"><span>链接库</span></a></h3><p>有如下文件路径</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>cmake_study</span></span>
<span class="line"><span>    |</span></span>
<span class="line"><span>    |__bin</span></span>
<span class="line"><span>    |__build</span></span>
<span class="line"><span>    |__src</span></span>
<span class="line"><span>    |__test</span></span>
<span class="line"><span>        |__inc</span></span>
<span class="line"><span>        |   |__test1.h</span></span>
<span class="line"><span>        |__lib</span></span>
<span class="line"><span>            |__test2.lib</span></span>
<span class="line"><span>            |__tets2.dll</span></span>
<span class="line"><span>   cmakelist.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cmake line-numbers-mode" data-ext="cmake" data-title="cmake"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 输出bin文件路径</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">EXECUTABLE_OUTPUT_PATH</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> \${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/bin)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 将源代码添加到变量</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">set</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(src_list </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/src/main.c)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 添加头文件搜索路径</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include_directories</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/testFunc/inc)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 在指定路径下查找库，并把库的绝对路径存放到变量里</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">find_library</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(TESTFUNC_LIB testFunc HINTS </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${PROJECT_SOURCE_DIR}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/testFunc/lib)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 执行源文件</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">add_executable</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(main </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${src_list}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 把目标文件与库文件进行链接</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">target_link_libraries</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(main </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">\${TESTFUNC_LIB}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PRIVATE 关键字表明 fmt 仅在生成 HelloWorld 时需要，不应传播到其他依赖项目</p><h3 id="cmake-命令速览" tabindex="-1"><a class="header-anchor" href="#cmake-命令速览"><span>cmake 命令速览</span></a></h3><p>cmake -Bbuild -GNinja -S. 以ninja生成 以 当前目录为源码 构建目录为build(如果没有就新建)</p><p>cmake -Bbuild -GNinja -S.. 在build文件夹下执行</p><p>ninja 在build文件夹下执行</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>为什么选择第二个呢?我们创建的文件中使用了c++的标准库<code>&lt;iostream&gt;</code>所以需要创建以第二个任务编译器<code>g++</code>而不是gcc。如果你不小心点击了第一个任务并运行,则你肯定会在vscode下端的终端中获得如下报错,如果你不小心就是点击到了第一个任务,你可以选择编辑当前vscode打开的文件夹下的.vscode中的<code>task.json</code>文件,将<code>&#39;command&#39;</code>一行的最后一个<code>gcc</code>手动改为<code>g++</code>,并且为了避免混淆,将<code>label</code>行的<code>C/C++: g++.exe 生成活动文件</code>改为 g++或者你喜欢的名字\` <a href="#footnote-ref1" class="footnote-backref">↩︎</a> <a href="#footnote-ref1:1" class="footnote-backref">↩︎</a></p></li></ol></section>`,46)]))}const c=i(h,[["render",k],["__file","index.html.vue"]]),o=JSON.parse('{"path":"/article/wpu7x9jw/","title":"搭建vscode-cpp环境","lang":"zh-CN","frontmatter":{"title":"搭建vscode-cpp环境","createTime":"2024/11/05 23:10:14","permalink":"/article/wpu7x9jw/","description":"前提介绍 因为本文使用的编译器为Cqwrteur编译的编译器，所以相比mingw-w64的安装包缺少在linux上的常用构建工具makefile,且因为直接解压缩没有写入注册表，环境变量需要读者自己配置。 本文采用ninja作为构建工具，Cmake作为生成.ninja的项目管理工具。 准备工作 1.下载VScode,ninja,Cmake 2.Wind...","head":[["meta",{"property":"og:url","content":"https://github.com/Yuzhiy05/Yuzhiy05.github.io/article/wpu7x9jw/"}],["meta",{"property":"og:title","content":"搭建vscode-cpp环境"}],["meta",{"property":"og:description","content":"前提介绍 因为本文使用的编译器为Cqwrteur编译的编译器，所以相比mingw-w64的安装包缺少在linux上的常用构建工具makefile,且因为直接解压缩没有写入注册表，环境变量需要读者自己配置。 本文采用ninja作为构建工具，Cmake作为生成.ninja的项目管理工具。 准备工作 1.下载VScode,ninja,Cmake 2.Wind..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://github.com/Yuzhiy05/Yuzhiy05.github.io/images/note/vscodetool/pluge.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-02T15:54:51.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-02T15:54:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"搭建vscode-cpp环境\\",\\"image\\":[\\"https://github.com/Yuzhiy05/Yuzhiy05.github.io/images/note/vscodetool/pluge.png\\",\\"https://github.com/Yuzhiy05/Yuzhiy05.github.io/images/note/vscodetool/task_list_pre.png\\",\\"https://github.com/Yuzhiy05/Yuzhiy05.github.io/images/note/vscodetool/vscode_butten_build.png\\"],\\"dateModified\\":\\"2024-12-02T15:54:51.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"前提介绍","slug":"前提介绍","link":"#前提介绍","children":[]},{"level":2,"title":"准备工作","slug":"准备工作","link":"#准备工作","children":[]},{"level":2,"title":"Vscode搭配Cmake","slug":"vscode搭配cmake","link":"#vscode搭配cmake","children":[{"level":3,"title":"task.json","slug":"task-json","link":"#task-json","children":[]},{"level":3,"title":"常见问题:","slug":"常见问题","link":"#常见问题","children":[]},{"level":3,"title":"构建CmakeLists","slug":"构建cmakelists","link":"#构建cmakelists","children":[]},{"level":3,"title":"创建 CMakePresets.json","slug":"创建-cmakepresets-json","link":"#创建-cmakepresets-json","children":[]}]},{"level":2,"title":"创建一个项目","slug":"创建一个项目","link":"#创建一个项目","children":[]},{"level":2,"title":"cmakelist配置","slug":"cmakelist配置","link":"#cmakelist配置","children":[{"level":3,"title":"生成动态库","slug":"生成动态库","link":"#生成动态库","children":[]},{"level":3,"title":"链接库","slug":"链接库","link":"#链接库","children":[]},{"level":3,"title":"cmake 命令速览","slug":"cmake-命令速览","link":"#cmake-命令速览","children":[]}]}],"readingTime":{"minutes":7.56,"words":2267},"git":{"createdTime":1730642028000,"updatedTime":1733154891000,"contributors":[{"name":"ImoutoCon1999","email":"ImoutoCon1999@outlook.com","commits":2}]},"autoDesc":true,"filePathRelative":"tools/搭建vscode-cpp环境.md","categoryList":[{"id":"4a9315","sort":10001,"name":"tools"}],"bulletin":false}');export{c as comp,o as data};
